#!/usr/bin/env bash

# Function that prints out the help text
# formatting for the help strings
fmt_help="  %-20s\t%-54s\n"
_help() {
    echo "pts: Show Pokemon sprites in the terminal"
    # TODO: Show a little pokeball ascii here

    echo ""
    echo "Usage: pts [OPTION] POKEMON..."
    printf "${fmt_help}" \
        "-b, --big" "Display big sprites (default)" \
        "-a, --animation" "Display animated sprites" \
        "-s, --small" "Display small sprites" \
        "-h, --help" "Print this help." \

    echo ""
    echo "Shiny: prepend \"s{hiny}:\" to POKEMON"
    echo "TODO: default? shiny chance?"

    echo ""

    echo "Sex: append \"+m{ale}/f{emale}\" to POKEMON"
    echo "TODO: default? 50/50?"
    echo ""

    echo "Examples: pts pikachu"
    echo "          pts s:meowstic+female"
    echo "          pts -s s:bulbasaur+m ns:pikachu+f venusaur"
    echo "          pts -b charizard-mega-x+male s:ho-oh moltres"
    echo "          pts -a shiny:squirtle"
}


# Handling command line arguments
case "$#" in
    0)
        # display help if no arguments are given
        _help
        ;;
    *)
        use_small=0
        use_ani=0
        pokemon_start_idx=1
        flagged=0

        if [ "$1" == '-s' ] || [ "$1" == '--small' ]; then
            use_small=1
            pokemon_start_idx=2
            flagged=1
        elif [ "$1" == '-a' ] || [ "$1" == '--animation' ]; then
            use_ani=1
            pokemon_start_idx=2
            flagged=1
        elif [ "$1" == '-b' ] || [ "$1" == '--big' ]; then
            pokemon_start_idx=2
            flagged=1
        elif [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
            _help
            exit
        fi

        if [ $# == 1 ] && [ $flagged == 1 ]; then
            echo "You forgot to mention any Pokemon! See help:"
            echo ""
            _help
            exit
        fi

        # Parse pokemon
        pokemon_images=()
        for pokemon_desc in "${@:$pokemon_start_idx}"; do
            # Parse for shiny
            IFS=':' read -ra pokemon_desc_arr <<< "$pokemon_desc"
            if [ ${#pokemon_desc_arr[@]} == 1 ]; then
                pokemon=${pokemon_desc_arr[0]}
                shiny_str=''
            else
                shiny_str=${pokemon_desc_arr[0]}
                pokemon=${pokemon_desc_arr[1]}
            fi

            if [ -z "$shiny_str" ]; then
                shiny_str='not-shiny'
                # TODO: shiny chance random it
            fi

            if [ $shiny_str = 'shiny' ] || [ $shiny_str = 's' ]; then
                _type=shiny
            elif [ $shiny_str = 'not-shiny' ] || [ $shiny_str = 'ns' ]; then
                _type=not-shiny
            else
                echo "Incorrect shiny specifier! See help:"
                echo ""
                _help
                exit
            fi

            # Parse for sex
            IFS='+' read -ra pokemon_desc_arr <<< "$pokemon"
            if [ ${#pokemon_desc_arr[@]} == 1 ]; then
                pokemon=${pokemon_desc_arr[0]}
                sex_str=''
            else
                pokemon=${pokemon_desc_arr[0]}
                sex_str=${pokemon_desc_arr[1]}
            fi

            if [ -z "$sex_str" ]; then
                sex_str='male'
                # TODO: fifty fifty random it male/female
            fi

            if [ $sex_str = 'male' ] || [ $sex_str = 'm' ]; then
                sex=male
            elif [ $sex_str = 'female' ] || [ $sex_str = 'f' ]; then
                sex=female
            else
                echo "Incorrect sex specifier! See help:"
                echo ""
                _help
                exit
            fi

            # Parse for random
            if [ $pokemon = 'random' ]; then
                echo $pokemon
                # Add percentage to be shiny
                # Delimit gens on comma
                # Allow to specify range and specifics like yay
            fi

            # curl images
            if [ $use_small == 1 ]; then

                # default type of small sprites is "regular"
                if [ $_type = 'not-shiny' ]; then
                    _type=regular
                fi
                if [ $sex = 'male' ]; then
                    sex=''
                fi

                # For small sprites only limited number is exclusively female,
                # thus need to do a check to see if female exists
                # if not revert to male (i.e. sex='')
                http_code=$(curl -s -o /dev/null -I -w "%{http_code}" \
                    "https://raw.githubusercontent.com/msikma/pokesprite/master/pokemon-gen8/$_type/$sex/$pokemon.png")
                if [ $http_code == '404' ]; then
                    sex=''
                fi

                curl -sL \
                    "https://raw.githubusercontent.com/msikma/pokesprite/master/pokemon-gen8/$_type/$sex/$pokemon.png" \
                    -o "$pokemon_desc.png"

            elif [ $use_ani == 1 ]; then
                curl -sL \
                    "https://projectpokemon.org/images/$_type-sprite/$pokemon.gif" \
                    -o "$pokemon_desc.gif"
            else
                # default type of big sprites is "default"
                if [ $_type = 'not-shiny' ] && [ $sex != 'female' ]; then
                    _desc=default
                elif [ $_type = 'not-shiny' ] && [ $sex == 'female' ]; then
                    _desc=female
                    _fallback=default
                elif [ $_type = 'shiny' ] && [ $sex != 'female' ]; then
                    _desc=shiny
                else
                    _desc=shiny_female
                    _fallback=shiny
                fi

                json_field=".sprites.front_${_desc}"
                url=$(curl -s "https://pokeapi.co/api/v2/pokemon/$pokemon" | \
                    jq -r $json_field)

                # For big sprites only limited number is exclusively female,
                # thus need to do a check to see if female exists
                # Use fallback (male) if female does not exist
                if [ $url == 'null' ]; then
                    _desc=$_fallback
                    json_field=".sprites.front_${_desc}"
                    url=$(curl -s "https://pokeapi.co/api/v2/pokemon/$pokemon" | \
                        jq -r $json_field)
                fi

                curl -sL $url -o "$pokemon_desc.png"

            fi

            pokemon_image="$pokemon_desc.png"
            pokemon_images+=(${pokemon_image})
        done
        ;;
esac

# Stitch pokemon images and display
if [ $use_ani == 0 ]; then
    for _i in "${pokemon_images[@]}"; do

        # Normalize images (have same bottom) by default images are centered
        convert "$_i" -trim "$_i"

        # Flip to level the base of each image
        convert -flip "$_i" "$_i"
    done

    # Stitch them with transparent background
    convert -background 'rgba(0, 0, 0, 0)' "${pokemon_images[@]}" +append t.png

    # Flip image back
    convert -flip t.png t.png

    timg --upscale t.png

    # cleanup
    for _i in "${pokemon_images[@]}"; do
        rm -f "$_i"
    done
    rm -f t.png
else
    echo "ani!"
fi
