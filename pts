#!/usr/bin/env bash

# Function that prints out the help text
# formatting for the help strings
fmt_help="  %-20s\t%-54s\n"
_help() {
    echo "pts: Show Pokemon sprites in the terminal"
    # TODO: Show a little pokeball ascii here
    # TODO: Simplify # calls to pokeapi (random parse errors with jq?)

    echo ""
    echo "Usage: pts [OPTION] POKEMON..."
    printf "${fmt_help}" \
        "-b, --big" "Display big sprites (default)" \
        "-a, --animation" "Display animated sprites" \
        "-s, --small" "Display small sprites" \
        "-h, --help" "Print this help." \

    echo ""
    echo "Shiny: prepend \"s(hiny):\" to POKEMON"
    echo "default: use shiny ratio of 1/8192"

    echo ""

    echo "Sex: append \"+m(ale)/+f(emale)\" to POKEMON"
    echo "default: use sex ratio of pokemon"

    echo ""

    echo "Random: use \"random\" for POKEMON"
    echo "note: specifying a sex for random is a suggestion as"
    echo "random pokemon may have sex restrictions"
    echo ""

    echo "Examples: pts pikachu"
    echo "          pts s:nidoran-f+f nidoran-m"
    echo "          pts -s s:bulbasaur+m ns:pikachu+f venusaur"
    echo "          pts -b charizard-mega-x+male s:ho-oh moltres-galar"
    echo "          pts -a shiny:squirtle s:pikachu-gmax"
    echo "          pts type-null farfetchd sirfetchd"
}


# Handling command line arguments
case "$#" in
    0)
        # display help if no arguments are given
        _help
        exit
        ;;
    *)
        use_small=0
        use_ani=0
        pokemon_start_idx=1
        flagged=0

        if [ "$1" == '-s' ] || [ "$1" == '--small' ]; then
            use_small=1
            pokemon_start_idx=2
            flagged=1
        elif [ "$1" == '-a' ] || [ "$1" == '--animation' ]; then
            use_ani=1
            pokemon_start_idx=2
            flagged=1
        elif [ "$1" == '-b' ] || [ "$1" == '--big' ]; then
            pokemon_start_idx=2
            flagged=1
        elif [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
            _help
            exit
        fi

        if [ $# == 1 ] && [ $flagged == 1 ]; then
            echo "You forgot to mention any Pokemon! See help:"
            echo ""
            _help
            exit
        fi

        # Parse pokemon
        pokemon_images=()
        _loop_num=0
        for pokemon_desc in "${@:$pokemon_start_idx}"; do

            # Parse for shiny
            IFS=':' read -ra pokemon_desc_arr <<< "$pokemon_desc"
            if [ ${#pokemon_desc_arr[@]} == 1 ]; then
                pokemon=${pokemon_desc_arr[0]}
                shiny_str=''
            else
                shiny_str=${pokemon_desc_arr[0]}
                pokemon=${pokemon_desc_arr[1]}
            fi

            # Parse for sex
            IFS='+' read -ra pokemon_desc_arr <<< "$pokemon"
            if [ ${#pokemon_desc_arr[@]} == 1 ]; then
                pokemon=${pokemon_desc_arr[0]}
                sex_str=''
            else
                pokemon=${pokemon_desc_arr[0]}
                sex_str=${pokemon_desc_arr[1]}
            fi

            if [ -z "$shiny_str" ]; then
                # Random shiny chance
                shiny_str='not-shiny'
                shiny_rate=8192
                shiny_chance=$(shuf -i 1-"$shiny_rate" -n 1)
                if [ $shiny_chance = $shiny_rate ]; then
                    shiny_str='shiny'
                fi
            fi

            if [ $shiny_str = 'shiny' ] || [ $shiny_str = 's' ]; then
                _type=shiny
            elif [ $shiny_str = 'not-shiny' ] || [ $shiny_str = 'ns' ]; then
                _type=not-shiny
            else
                echo "Incorrect shiny specifier! See help:"
                echo ""
                _help
                exit
            fi

            # TODO
            # Delimit gens on comma
            # Allow to specify range and specifics like yay
            # Parse for random
            is_random=0
            if [ "$pokemon" = 'random' ]; then
                is_random=1
                total_num=898

                # Choose random pokemon id
                pokemon_id=$(shuf -i 1-"$total_num" -n 1)
                pokemon=$(curl -s https://pokeapi.co/api/v2/pokemon/$pokemon_id | \
                    jq -r '.species.name')

                # if random pokemon_species has no entry but its form has entry
                # then need to use form, case in point:
                # giratina-{altered/origin}
                # pokemon=giratina
            fi

            # meowstic is weird in pokeapi (upstream issue?)
            # male shiny is actually female shiny?
            if [ $pokemon == 'meowstic' ]; then
                pokemon=meowstic-male
            fi

            # TODO may need to change end point with how forms work for pokeapi
            # Check if pokemon exists! If not use unown-? lol
            http_code=$(curl -s -o /dev/null -I -w "%{http_code}" \
                "https://pokeapi.co/api/v2/pokemon/$pokemon")
            if [ $http_code == '404' ]; then
                # Could be a pokemon form
                http_code=$(curl -s -o /dev/null -I -w "%{http_code}" \
                    "https://pokeapi.co/api/v2/pokemon-form/$pokemon")
                if [ $http_code == '404' ]; then
                    # Okay now it probably doesn't exist
                    echo "$pokemon is unknown?"
                    pokemon='unown-question'
                    pokemon='unown'
                fi
            fi

            pokemon_species=$(curl -s https://pokeapi.co/api/v2/pokemon/$pokemon | \
                jq -r '.species.name')

            # Ensure proper sex is used (if a pokemon cannot be male or cannot
            # be female that is enforced)
            sex_rate=$(curl -s "https://pokeapi.co/api/v2/pokemon-species/$pokemon_species" | \
                jq -r '.gender_rate')

            # meowstic is weird in pokeapi (upstream issue?)
            # convert meowstic-male back to meowstic for the other backends
            if [ $pokemon == 'meowstic-male' ]; then
                pokemon=meowstic
                sex_rate=4
            fi

            if [ -z "$sex_str" ]; then

                # Random sex chance based on pokemon sex ratio
                if [ "$sex_rate" = '-1' ]; then
                    sex_str='sexless'
                else
                    sex_div=8
                    sex_chance=$(shuf -i 1-"$sex_div" -n 1)
                    if [ $sex_chance -le $sex_rate ]; then
                        sex_str='female'
                    else
                        sex_str='male'
                    fi
                fi
            fi


            if [ $sex_str = 'male' ] || [ $sex_str = 'm' ]; then
                if [ $sex_rate = '8' ]; then
                    if [ $is_random = 0 ]; then
                        echo "$pokemon must be female!"
                        echo ""
                        exit
                    else
                        sex=female
                    fi
                elif [ $sex_rate = '-1' ]; then
                    if [ $is_random = 0 ]; then
                        echo "$pokemon has no sex!"
                        echo ""
                        exit
                    else
                        sex=male
                    fi
                else
                    sex=male
                fi
            elif [ $sex_str = 'female' ] || [ $sex_str = 'f' ]; then
                if [ $sex_rate = '0' ]; then
                    if [ $is_random = 0 ]; then
                        echo "$pokemon must be male!"
                        echo ""
                        exit
                    else
                        sex=male
                    fi
                elif [ $sex_rate = '-1' ]; then
                    if [ $is_random = 0 ]; then
                        echo "$pokemon has no sex!"
                        echo ""
                        exit
                    else
                        # use default sex of male
                        sex=male
                    fi
                else
                    sex=female
                fi
            elif [ $sex_str = 'sexless' ]; then
                if [ $sex_rate != '-1' ]; then
                    echo "$pokemon_species cannot be sexless!"
                    echo ""
                    exit
                else
                    # use default sex of male
                    sex=male
                fi
            else
                echo "Incorrect sex specifier! See help:"
                echo ""
                _help
                exit
            fi

            # curl images
            if [ $use_small == 1 ]; then
                # default type of small sprites is "regular"
                if [ $_type = 'not-shiny' ]; then
                    _type=regular
                fi
                if [ $sex = 'male' ]; then
                    sex=''
                fi

                if [ $pokemon = 'nidoran-f' ]; then
                    sex=''
                fi

                # Only limited number is exclusively female,
                # thus need to do a check to see if female exists
                # if not revert to male (i.e. sex='')
                http_code=$(curl -s -o /dev/null -I -w "%{http_code}" \
                    "https://raw.githubusercontent.com/msikma/pokesprite/master/pokemon-gen8/$_type/$sex/$pokemon.png")
                if [ $http_code == '404' ]; then
                    sex=''
                fi

                pokemon_image="$pokemon_desc.png"
                pokemon_image=$_loop_num$pokemon_image
                curl -sL \
                    "https://raw.githubusercontent.com/msikma/pokesprite/master/pokemon-gen8/$_type/$sex/$pokemon.png" \
                    -o "$pokemon_image"
            elif [ $use_ani == 1 ]; then
                # default type of ani sprites is "normal"
                if [ $_type = 'not-shiny' ]; then
                    _type=normal
                fi

                if [ $sex = 'female' ] && [ $pokemon != 'nidoran-f' ]; then
                    sex='-f'
                else
                    sex=''
                fi

                # Only limited number is exclusively female,
                # thus need to do a check to see if female exists
                # if not revert to male (i.e. sex='')
                http_code=$(curl -s -o /dev/null -I -w "%{http_code}" \
                    "https://projectpokemon.org/images/$_type-sprite/$pokemon$sex.gif")
                if [ $http_code == '404' ]; then
                    sex=''
                fi

                # ani sprites unique naming search and replace
                # nidoran-f/m => nidoran_f/m
                pokemon=${pokemon/nidoran-f/nidoran_f}
                pokemon=${pokemon/nidoran-m/nidoran_m}
                # type-null => typenull
                pokemon=${pokemon/type-null/typenull}
                # mega-{x/y} => mega{x/y}
                pokemon=${pokemon/mega-/mega}
                # gmax => gigantamax
                pokemon=${pokemon/gmax/gigantamax}

                pokemon_image="$pokemon_desc.gif"
                pokemon_image=$_loop_num$pokemon_image
                curl -sL \
                    "https://projectpokemon.org/images/$_type-sprite/$pokemon$sex.gif" \
                    -o "$pokemon_image"
            else
                # default type of big sprites is "default"
                if [ $_type = 'not-shiny' ] && [ $sex != 'female' ]; then
                    _desc=default
                elif [ $_type = 'not-shiny' ] && [ $sex == 'female' ]; then
                    _desc=female
                    _fallback=default
                elif [ $_type = 'shiny' ] && [ $sex != 'female' ]; then
                    _desc=shiny
                else
                    _desc=shiny_female
                    _fallback=shiny
                fi

                # meowstic is weird in pokeapi (upstream issue?)
                # male shiny is actually female shiny?
                if [ $pokemon == 'meowstic' ]; then
                    pokemon=meowstic-male
                fi

                json_field=".sprites.front_${_desc}"
                url=$(curl -s "https://pokeapi.co/api/v2/pokemon/$pokemon" | \
                    jq -r $json_field)

                # Only limited number is exclusively female,
                # thus need to do a check to see if female exists
                # if not revert to male (i.e. sex='')
                # note for female only pokemon, pokeapi uses male classifier
                if [ $url == 'null' ]; then
                    _desc=$_fallback
                    json_field=".sprites.front_${_desc}"
                    url=$(curl -s "https://pokeapi.co/api/v2/pokemon/$pokemon" | \
                        jq -r $json_field)
                fi
                pokemon_image="$pokemon_desc.png"
                pokemon_image=$_loop_num$pokemon_image
                curl -sL $url -o "$pokemon_image"
            fi
            pokemon_images+=(${pokemon_image})
            _loop_num=$((_loop_num+1))
        done
        ;;
esac

# Stitch pokemon images and display
if [ $use_ani == 0 ]; then
    for _i in "${pokemon_images[@]}"; do

        # Normalize images (have same bottom) by default images are centered
        convert "$_i" -trim "$_i"

        # Flip to level the base of each image
        convert -flip "$_i" "$_i"
    done

    # Stitch them with transparent background
    convert -background 'rgba(0, 0, 0, 0)' "${pokemon_images[@]}" +append t.png

    # Flip image back
    convert -flip t.png t.png

    timg --upscale t.png

    # cleanup
    for _i in "${pokemon_images[@]}"; do
        rm -f "$_i"
    done
    rm -f t.png
else
    _width=0
    min_frame=100

    for _i in "${pokemon_images[@]}"; do
        # Flip to level the base of each gif
        convert -flip "$_i" "$_i"

        # Get size
        _width=$(convert "${_i}[0]" -ping -format "%w" info:)
        _height=$(convert "${_i}[0]" -ping -format "%h" info:)

        _sum_width=$((_sum_width + _width))
        sum_widths+=("${_sum_width}")
        (( _height > max_height )) && max_height=${_height}

        _frame=$(identify "$_i" | wc -l)
        frames+=("${_frame}")
        (( _frame < min_frame )) && min_frame=${_frame}
    done

    specified_frame=$min_frame
    coalesce_str="convert ${pokemon_images[0]}"

    for _loop_num in "${!pokemon_images[@]}"; do
        _frame=${frames[$_loop_num]}

        if [ "$_frame" -gt "$specified_frame" ]; then
            # Delete extra frames from gif
            extra_frames=$(( _frame - specified_frame ))
            extra_idx_del_str=""

            for (( _extra_num=0; _extra_num<extra_frames; _extra_num++ )); do
                idx=$(( _extra_num * _frame / extra_frames ))
                extra_idx_del_str="$extra_idx_del_str$idx,"
            done

            convert "${pokemon_images[_loop_num]}" -delete "$extra_idx_del_str" "${pokemon_images[_loop_num]}"
        else
            # Insert extra frames into gif
            extra_frames=$(( specified_frame - _frame ))

            for (( _extra_num=0; _extra_num<extra_frames; _extra_num++ )); do
                idx=$(( _extra_num * _frame / extra_frames + _extra_num ))
                convert "${pokemon_images[_loop_num]}" "${pokemon_images[_loop_num]}[$idx]" -insert $idx "${pokemon_images[_loop_num]}"
            done
        fi

        if [[ ${_loop_num} -gt 0 ]]; then
            coalesce_str="${coalesce_str} \
                -repage ${sum_widths[-1]}x${max_height} -coalesce \
                null: \( ${pokemon_images[_loop_num]} -coalesce \) \
                -geometry +${sum_widths[$((_loop_num - 1))]}+0 \
                -layers Composite\
            "
        fi
    done

    coalesce_str="${coalesce_str} t.gif"
    eval "$coalesce_str"

    # Flip image back
    convert -flip t.gif t.gif

    # Cleanup
    for _i in "${pokemon_images[@]}"; do
        rm -f "${_i}"
    done

    trap ctrl_c INT
    function  ctrl_c() {
        rm -f t.gif
    }

    # Display
    timg --upscale t.gif
fi
